// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MVAU_hls_3_MVAU_hls_3,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.591000,HLS_SYN_LAT=67,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=56,HLS_SYN_LUT=244,HLS_VERSION=2022_2}" *)

module MVAU_hls_3 (
        ap_clk,
        ap_rst_n,
        in0_V_TVALID,
        in1_V_TVALID,
        out0_V_TREADY,
        in0_V_TDATA,
        in0_V_TREADY,
        in1_V_TDATA,
        in1_V_TREADY,
        out0_V_TDATA,
        out0_V_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input   in0_V_TVALID;
input   in1_V_TVALID;
input   out0_V_TREADY;
input  [7:0] in0_V_TDATA;
output   in0_V_TREADY;
input  [7:0] in1_V_TDATA;
output   in1_V_TREADY;
output  [7:0] out0_V_TDATA;
output   out0_V_TVALID;

 reg    ap_rst_n_inv;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
wire   [0:0] icmp_ln249_fu_116_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] ap_CS_iter1_fsm;
reg   [0:0] icmp_ln249_reg_253;
reg   [0:0] icmp_ln290_reg_257;
reg    ap_predicate_op55_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
reg   [0:0] icmp_ln249_reg_253_pp0_iter1_reg;
reg   [0:0] icmp_ln290_reg_257_pp0_iter1_reg;
reg    ap_predicate_op56_write_state3;
wire    regslice_both_out0_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    in0_V_TDATA_blk_n;
reg    in1_V_TDATA_blk_n;
reg    out0_V_TDATA_blk_n;
wire   [0:0] icmp_ln290_fu_186_p2;
wire   [0:0] result_V_fu_207_p2;
reg   [0:0] result_V_reg_261;
reg   [31:0] sf_fu_72;
wire   [31:0] sf_1_fu_180_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_sf_load;
reg   [6:0] i_fu_76;
wire   [6:0] i_2_fu_122_p2;
reg   [6:0] ap_sig_allocacmp_i_1;
reg   [6:0] empty_fu_80;
wire   [6:0] add_ln840_fu_174_p2;
wire   [0:0] icmp_ln272_fu_142_p2;
wire  signed [1:0] W_packed_V_fu_138_p1;
wire   [1:0] inElem_fu_134_p1;
wire   [1:0] ret_V_fu_164_p0;
wire  signed [3:0] ret_V_fu_164_p2;
wire   [6:0] select_ln272_fu_148_p3;
wire  signed [6:0] sext_ln840_fu_170_p1;
wire   [5:0] tmp_fu_197_p4;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready;
wire    ap_done;
wire    ap_continue_int;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [7:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
wire    regslice_both_in1_V_U_apdone_blk;
wire   [7:0] in1_V_TDATA_int_regslice;
wire    in1_V_TVALID_int_regslice;
reg    in1_V_TREADY_int_regslice;
wire    regslice_both_in1_V_U_ack_in;
wire   [7:0] out0_V_TDATA_int_regslice;
reg    out0_V_TVALID_int_regslice;
wire    out0_V_TREADY_int_regslice;
wire    regslice_both_out0_V_U_vld_out;
wire   [3:0] ret_V_fu_164_p00;
reg    ap_condition_324;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
end

MVAU_hls_3_mul_2ns_2s_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
mul_2ns_2s_4_1_1_U1(
    .din0(ret_V_fu_164_p0),
    .din1(W_packed_V_fu_138_p1),
    .dout(ret_V_fu_164_p2)
);

MVAU_hls_3_flow_control_loop_pipe_no_ap_cont flow_control_loop_pipe_no_ap_cont_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(1'b1),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(1'b0),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(1'b0)
);

MVAU_hls_3_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

MVAU_hls_3_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_V_TDATA),
    .vld_in(in1_V_TVALID),
    .ack_in(regslice_both_in1_V_U_ack_in),
    .data_out(in1_V_TDATA_int_regslice),
    .vld_out(in1_V_TVALID_int_regslice),
    .ack_out(in1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_V_U_apdone_blk)
);

MVAU_hls_3_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out0_V_TDATA_int_regslice),
    .vld_in(out0_V_TVALID_int_regslice),
    .ack_in(out0_V_TREADY_int_regslice),
    .data_out(out0_V_TDATA),
    .vld_out(regslice_both_out0_V_U_vld_out),
    .ack_out(out0_V_TREADY),
    .apdone_blk(regslice_both_out0_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if ((icmp_ln249_fu_116_p2 == 1'd0)) begin
            i_fu_76 <= i_2_fu_122_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((icmp_ln249_fu_116_p2 == 1'd0) & (icmp_ln290_fu_186_p2 == 1'd1))) begin
            sf_fu_72 <= 32'd0;
        end else if (((icmp_ln249_fu_116_p2 == 1'd0) & (icmp_ln290_fu_186_p2 == 1'd0))) begin
            sf_fu_72 <= sf_1_fu_180_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            sf_fu_72 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_116_p2 == 1'd0))) begin
        empty_fu_80 <= add_ln840_fu_174_p2;
        icmp_ln290_reg_257 <= icmp_ln290_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln249_reg_253 <= icmp_ln249_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln249_reg_253_pp0_iter1_reg <= icmp_ln249_reg_253;
        icmp_ln290_reg_257_pp0_iter1_reg <= icmp_ln290_reg_257;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_116_p2 == 1'd0) & (icmp_ln290_fu_186_p2 == 1'd1))) begin
        result_V_reg_261 <= result_V_fu_207_p2;
    end
end

always @ (*) begin
    if ((((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_116_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_sf_load = 32'd0;
    end else begin
        ap_sig_allocacmp_sf_load = sf_fu_72;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_116_p2 == 1'd0))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_116_p2 == 1'd0))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_116_p2 == 1'd0))) begin
        in1_V_TDATA_blk_n = in1_V_TVALID_int_regslice;
    end else begin
        in1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln249_fu_116_p2 == 1'd0))) begin
        in1_V_TREADY_int_regslice = 1'b1;
    end else begin
        in1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op56_write_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((ap_predicate_op55_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        out0_V_TDATA_blk_n = out0_V_TREADY_int_regslice;
    end else begin
        out0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & (ap_predicate_op55_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        out0_V_TVALID_int_regslice = 1'b1;
    end else begin
        out0_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & ~(((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & ~((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((~((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & (icmp_ln249_reg_253_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter2_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign W_packed_V_fu_138_p1 = in1_V_TDATA_int_regslice[1:0];

assign add_ln840_fu_174_p2 = ($signed(select_ln272_fu_148_p3) + $signed(sext_ln840_fu_170_p1));

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_out0_V_U_apdone_blk == 1'b1) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_324 = (~(((1'b1 == ap_CS_iter2_fsm_state3) & ((regslice_both_out0_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((ap_predicate_op56_write_state3 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op55_write_state2 == 1'b1) & (out0_V_TREADY_int_regslice == 1'b0)))) | ((in1_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0)) | ((in0_V_TVALID_int_regslice == 1'b0) & (icmp_ln249_fu_116_p2 == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_predicate_op55_write_state2 = ((icmp_ln290_reg_257 == 1'd1) & (icmp_ln249_reg_253 == 1'd0));
end

always @ (*) begin
    ap_predicate_op56_write_state3 = ((icmp_ln290_reg_257_pp0_iter1_reg == 1'd1) & (icmp_ln249_reg_253_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_2_fu_122_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign icmp_ln249_fu_116_p2 = ((ap_sig_allocacmp_i_1 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_142_p2 = ((ap_sig_allocacmp_sf_load == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln290_fu_186_p2 = ((sf_1_fu_180_p2 == 32'd64) ? 1'b1 : 1'b0);

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign in1_V_TREADY = regslice_both_in1_V_U_ack_in;

assign inElem_fu_134_p1 = in0_V_TDATA_int_regslice[1:0];

assign out0_V_TDATA_int_regslice = result_V_reg_261;

assign out0_V_TVALID = regslice_both_out0_V_U_vld_out;

assign result_V_fu_207_p2 = (($signed(tmp_fu_197_p4) > $signed(6'd0)) ? 1'b1 : 1'b0);

assign ret_V_fu_164_p0 = ret_V_fu_164_p00;

assign ret_V_fu_164_p00 = inElem_fu_134_p1;

assign select_ln272_fu_148_p3 = ((icmp_ln272_fu_142_p2[0:0] == 1'b1) ? 7'd0 : empty_fu_80);

assign sext_ln840_fu_170_p1 = ret_V_fu_164_p2;

assign sf_1_fu_180_p2 = (ap_sig_allocacmp_sf_load + 32'd1);

assign tmp_fu_197_p4 = {{add_ln840_fu_174_p2[6:1]}};

endmodule //MVAU_hls_3
